//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HttpUtilWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HttpUtil), typeof(Singleton<HttpUtil>));
		L.RegFunction("Get", Get);
		L.RegFunction("GetAsyn", GetAsyn);
		L.RegFunction("Post", Post);
		L.RegFunction("PostAsyn", PostAsyn);
		L.RegFunction("New", _CreateHttpUtil);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHttpUtil(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				HttpUtil obj = new HttpUtil();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: HttpUtil.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				HttpResult o = obj.Get(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				System.Action<System.Exception> arg1 = (System.Action<System.Exception>)ToLua.CheckDelegate<System.Action<System.Exception>>(L, 3);
				HttpResult o = obj.Get(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				System.Action<System.Exception> arg1 = (System.Action<System.Exception>)ToLua.CheckDelegate<System.Action<System.Exception>>(L, 3);
				System.Text.Encoding arg2 = (System.Text.Encoding)ToLua.CheckObject<System.Text.Encoding>(L, 4);
				HttpResult o = obj.Get(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HttpUtil.Get");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAsyn(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				obj.GetAsyn(arg0);
				return 0;
			}
			else if (count == 3)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				System.Action<HttpResult> arg1 = (System.Action<HttpResult>)ToLua.CheckDelegate<System.Action<HttpResult>>(L, 3);
				obj.GetAsyn(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				System.Action<HttpResult> arg1 = (System.Action<HttpResult>)ToLua.CheckDelegate<System.Action<HttpResult>>(L, 3);
				System.Action<System.Exception> arg2 = (System.Action<System.Exception>)ToLua.CheckDelegate<System.Action<System.Exception>>(L, 4);
				obj.GetAsyn(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				System.Action<HttpResult> arg1 = (System.Action<HttpResult>)ToLua.CheckDelegate<System.Action<HttpResult>>(L, 3);
				System.Action<System.Exception> arg2 = (System.Action<System.Exception>)ToLua.CheckDelegate<System.Action<System.Exception>>(L, 4);
				System.Text.Encoding arg3 = (System.Text.Encoding)ToLua.CheckObject<System.Text.Encoding>(L, 5);
				obj.GetAsyn(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HttpUtil.GetAsyn");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Post(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				HttpResult o = obj.Post(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				System.Action<System.Exception> arg2 = (System.Action<System.Exception>)ToLua.CheckDelegate<System.Action<System.Exception>>(L, 4);
				HttpResult o = obj.Post(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				System.Action<System.Exception> arg2 = (System.Action<System.Exception>)ToLua.CheckDelegate<System.Action<System.Exception>>(L, 4);
				System.Text.Encoding arg3 = (System.Text.Encoding)ToLua.CheckObject<System.Text.Encoding>(L, 5);
				HttpResult o = obj.Post(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HttpUtil.Post");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PostAsyn(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				obj.PostAsyn(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				System.Action<HttpResult> arg2 = (System.Action<HttpResult>)ToLua.CheckDelegate<System.Action<HttpResult>>(L, 4);
				obj.PostAsyn(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				System.Action<HttpResult> arg2 = (System.Action<HttpResult>)ToLua.CheckDelegate<System.Action<HttpResult>>(L, 4);
				System.Action<System.Exception> arg3 = (System.Action<System.Exception>)ToLua.CheckDelegate<System.Action<System.Exception>>(L, 5);
				obj.PostAsyn(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				HttpUtil obj = (HttpUtil)ToLua.CheckObject<HttpUtil>(L, 1);
				System.Net.HttpWebRequest arg0 = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 2);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 3);
				System.Action<HttpResult> arg2 = (System.Action<HttpResult>)ToLua.CheckDelegate<System.Action<HttpResult>>(L, 4);
				System.Action<System.Exception> arg3 = (System.Action<System.Exception>)ToLua.CheckDelegate<System.Action<System.Exception>>(L, 5);
				System.Text.Encoding arg4 = (System.Text.Encoding)ToLua.CheckObject<System.Text.Encoding>(L, 6);
				obj.PostAsyn(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: HttpUtil.PostAsyn");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

