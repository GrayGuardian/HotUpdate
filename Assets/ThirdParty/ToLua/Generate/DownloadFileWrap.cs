//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DownloadFileWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DownloadFile), typeof(System.Object));
		L.RegFunction("GetFileSize", GetFileSize);
		L.RegFunction("GetFileSizeAsyn", GetFileSizeAsyn);
		L.RegFunction("DownloadToFile", DownloadToFile);
		L.RegFunction("DownloadToMemory", DownloadToMemory);
		L.RegFunction("Close", Close);
		L.RegFunction("New", _CreateDownloadFile);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Url", get_Url, set_Url);
		L.RegVar("OnError", get_OnError, set_OnError);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDownloadFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				DownloadFile obj = new DownloadFile(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DownloadFile.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFileSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DownloadFile obj = (DownloadFile)ToLua.CheckObject<DownloadFile>(L, 1);
			long o = obj.GetFileSize();
			LuaDLL.tolua_pushint64(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFileSizeAsyn(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				DownloadFile obj = (DownloadFile)ToLua.CheckObject<DownloadFile>(L, 1);
				obj.GetFileSizeAsyn();
				return 0;
			}
			else if (count == 2)
			{
				DownloadFile obj = (DownloadFile)ToLua.CheckObject<DownloadFile>(L, 1);
				System.Action<long> arg0 = (System.Action<long>)ToLua.CheckDelegate<System.Action<long>>(L, 2);
				obj.GetFileSizeAsyn(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DownloadFile.GetFileSizeAsyn");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownloadToFile(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				DownloadFile obj = (DownloadFile)ToLua.CheckObject<DownloadFile>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.DownloadToFile(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				DownloadFile obj = (DownloadFile)ToLua.CheckObject<DownloadFile>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Action<long,long> arg2 = (System.Action<long,long>)ToLua.CheckDelegate<System.Action<long,long>>(L, 4);
				obj.DownloadToFile(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				DownloadFile obj = (DownloadFile)ToLua.CheckObject<DownloadFile>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Action<long,long> arg2 = (System.Action<long,long>)ToLua.CheckDelegate<System.Action<long,long>>(L, 4);
				System.Action<byte[]> arg3 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 5);
				obj.DownloadToFile(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DownloadFile.DownloadToFile");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownloadToMemory(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				DownloadFile obj = (DownloadFile)ToLua.CheckObject<DownloadFile>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.DownloadToMemory(arg0);
				return 0;
			}
			else if (count == 3)
			{
				DownloadFile obj = (DownloadFile)ToLua.CheckObject<DownloadFile>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Action<long,long> arg1 = (System.Action<long,long>)ToLua.CheckDelegate<System.Action<long,long>>(L, 3);
				obj.DownloadToMemory(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				DownloadFile obj = (DownloadFile)ToLua.CheckObject<DownloadFile>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				System.Action<long,long> arg1 = (System.Action<long,long>)ToLua.CheckDelegate<System.Action<long,long>>(L, 3);
				System.Action<byte[]> arg2 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 4);
				obj.DownloadToMemory(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DownloadFile.DownloadToMemory");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			DownloadFile obj = (DownloadFile)ToLua.CheckObject<DownloadFile>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DownloadFile obj = (DownloadFile)o;
			string ret = obj.Url;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Url on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnError(IntPtr L)
	{
		ToLua.Push(L, new EventObject(typeof(System.Action<System.Exception>)));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			DownloadFile obj = (DownloadFile)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Url = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Url on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnError(IntPtr L)
	{
		try
		{
			DownloadFile obj = (DownloadFile)ToLua.CheckObject(L, 1, typeof(DownloadFile));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'DownloadFile.OnError' can only appear on the left hand side of += or -= when used outside of the type 'DownloadFile'");
			}

			if (arg0.op == EventOp.Add)
			{
				System.Action<System.Exception> ev = (System.Action<System.Exception>)arg0.func;
				obj.OnError += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				System.Action<System.Exception> ev = (System.Action<System.Exception>)arg0.func;
				obj.OnError -= ev;
			}

			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

