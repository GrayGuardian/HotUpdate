//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Net_HttpWebRequestWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Net.HttpWebRequest), typeof(System.Net.WebRequest));
		L.RegFunction("AddRange", AddRange);
		L.RegFunction("BeginGetRequestStream", BeginGetRequestStream);
		L.RegFunction("EndGetRequestStream", EndGetRequestStream);
		L.RegFunction("GetRequestStream", GetRequestStream);
		L.RegFunction("BeginGetResponse", BeginGetResponse);
		L.RegFunction("EndGetResponse", EndGetResponse);
		L.RegFunction("GetResponse", GetResponse);
		L.RegFunction("Abort", Abort);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Accept", get_Accept, set_Accept);
		L.RegVar("Address", get_Address, null);
		L.RegVar("AllowAutoRedirect", get_AllowAutoRedirect, set_AllowAutoRedirect);
		L.RegVar("AllowWriteStreamBuffering", get_AllowWriteStreamBuffering, set_AllowWriteStreamBuffering);
		L.RegVar("AllowReadStreamBuffering", get_AllowReadStreamBuffering, set_AllowReadStreamBuffering);
		L.RegVar("AutomaticDecompression", get_AutomaticDecompression, set_AutomaticDecompression);
		L.RegVar("ClientCertificates", get_ClientCertificates, set_ClientCertificates);
		L.RegVar("Connection", get_Connection, set_Connection);
		L.RegVar("ConnectionGroupName", get_ConnectionGroupName, set_ConnectionGroupName);
		L.RegVar("ContentLength", get_ContentLength, set_ContentLength);
		L.RegVar("ContentType", get_ContentType, set_ContentType);
		L.RegVar("ContinueDelegate", get_ContinueDelegate, set_ContinueDelegate);
		L.RegVar("CookieContainer", get_CookieContainer, set_CookieContainer);
		L.RegVar("Credentials", get_Credentials, set_Credentials);
		L.RegVar("Date", get_Date, set_Date);
		L.RegVar("Expect", get_Expect, set_Expect);
		L.RegVar("HaveResponse", get_HaveResponse, null);
		L.RegVar("Headers", get_Headers, set_Headers);
		L.RegVar("Host", get_Host, set_Host);
		L.RegVar("IfModifiedSince", get_IfModifiedSince, set_IfModifiedSince);
		L.RegVar("KeepAlive", get_KeepAlive, set_KeepAlive);
		L.RegVar("MaximumAutomaticRedirections", get_MaximumAutomaticRedirections, set_MaximumAutomaticRedirections);
		L.RegVar("ReadWriteTimeout", get_ReadWriteTimeout, set_ReadWriteTimeout);
		L.RegVar("MediaType", get_MediaType, set_MediaType);
		L.RegVar("Method", get_Method, set_Method);
		L.RegVar("Pipelined", get_Pipelined, set_Pipelined);
		L.RegVar("PreAuthenticate", get_PreAuthenticate, set_PreAuthenticate);
		L.RegVar("ProtocolVersion", get_ProtocolVersion, set_ProtocolVersion);
		L.RegVar("Proxy", get_Proxy, set_Proxy);
		L.RegVar("Referer", get_Referer, set_Referer);
		L.RegVar("RequestUri", get_RequestUri, null);
		L.RegVar("SendChunked", get_SendChunked, set_SendChunked);
		L.RegVar("ServicePoint", get_ServicePoint, null);
		L.RegVar("SupportsCookieContainer", get_SupportsCookieContainer, null);
		L.RegVar("Timeout", get_Timeout, set_Timeout);
		L.RegVar("TransferEncoding", get_TransferEncoding, set_TransferEncoding);
		L.RegVar("UseDefaultCredentials", get_UseDefaultCredentials, set_UseDefaultCredentials);
		L.RegVar("UserAgent", get_UserAgent, set_UserAgent);
		L.RegVar("UnsafeAuthenticatedConnectionSharing", get_UnsafeAuthenticatedConnectionSharing, set_UnsafeAuthenticatedConnectionSharing);
		L.RegVar("ServerCertificateValidationCallback", get_ServerCertificateValidationCallback, set_ServerCertificateValidationCallback);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRange(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				obj.AddRange(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<long>(L, 2))
			{
				System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				obj.AddRange(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, int>(L, 2))
			{
				System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.AddRange(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<long, long>(L, 2))
			{
				System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
				long arg0 = LuaDLL.tolua_toint64(L, 2);
				long arg1 = LuaDLL.tolua_toint64(L, 3);
				obj.AddRange(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, int>(L, 2))
			{
				System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.AddRange(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, long>(L, 2))
			{
				System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				long arg1 = LuaDLL.tolua_toint64(L, 3);
				obj.AddRange(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, int>(L, 3))
			{
				System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.AddRange(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<long, long>(L, 3))
			{
				System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				long arg1 = LuaDLL.tolua_toint64(L, 3);
				long arg2 = LuaDLL.tolua_toint64(L, 4);
				obj.AddRange(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.HttpWebRequest.AddRange");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginGetRequestStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
			System.AsyncCallback arg0 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			System.IAsyncResult o = obj.BeginGetRequestStream(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndGetRequestStream(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
				System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
				System.IO.Stream o = obj.EndGetRequestStream(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3)
			{
				System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
				System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
				System.Net.TransportContext arg1 = null;
				System.IO.Stream o = obj.EndGetRequestStream(arg0, out arg1);
				ToLua.PushObject(L, o);
				ToLua.PushObject(L, arg1);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.HttpWebRequest.EndGetRequestStream");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRequestStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
			System.IO.Stream o = obj.GetRequestStream();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginGetResponse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
			System.AsyncCallback arg0 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			System.IAsyncResult o = obj.BeginGetResponse(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndGetResponse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			System.Net.WebResponse o = obj.EndGetResponse(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResponse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
			System.Net.WebResponse o = obj.GetResponse();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Abort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)ToLua.CheckObject<System.Net.HttpWebRequest>(L, 1);
			obj.Abort();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Accept(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string ret = obj.Accept;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Accept on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Address(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Uri ret = obj.Address;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Address on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AllowAutoRedirect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool ret = obj.AllowAutoRedirect;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllowAutoRedirect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AllowWriteStreamBuffering(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool ret = obj.AllowWriteStreamBuffering;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllowWriteStreamBuffering on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AllowReadStreamBuffering(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool ret = obj.AllowReadStreamBuffering;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllowReadStreamBuffering on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AutomaticDecompression(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.DecompressionMethods ret = obj.AutomaticDecompression;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AutomaticDecompression on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ClientCertificates(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Security.Cryptography.X509Certificates.X509CertificateCollection ret = obj.ClientCertificates;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ClientCertificates on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Connection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string ret = obj.Connection;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Connection on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectionGroupName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string ret = obj.ConnectionGroupName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConnectionGroupName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ContentLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			long ret = obj.ContentLength;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContentLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ContentType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string ret = obj.ContentType;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContentType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ContinueDelegate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.HttpContinueDelegate ret = obj.ContinueDelegate;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContinueDelegate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CookieContainer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.CookieContainer ret = obj.CookieContainer;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CookieContainer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Credentials(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.ICredentials ret = obj.Credentials;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Credentials on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Date(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.DateTime ret = obj.Date;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Date on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Expect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string ret = obj.Expect;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Expect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HaveResponse(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool ret = obj.HaveResponse;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HaveResponse on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Headers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.WebHeaderCollection ret = obj.Headers;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Headers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Host(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string ret = obj.Host;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Host on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IfModifiedSince(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.DateTime ret = obj.IfModifiedSince;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IfModifiedSince on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_KeepAlive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool ret = obj.KeepAlive;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index KeepAlive on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaximumAutomaticRedirections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			int ret = obj.MaximumAutomaticRedirections;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaximumAutomaticRedirections on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReadWriteTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			int ret = obj.ReadWriteTimeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReadWriteTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MediaType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string ret = obj.MediaType;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MediaType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Method(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string ret = obj.Method;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Method on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Pipelined(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool ret = obj.Pipelined;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pipelined on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PreAuthenticate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool ret = obj.PreAuthenticate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PreAuthenticate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Version ret = obj.ProtocolVersion;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ProtocolVersion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Proxy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.IWebProxy ret = obj.Proxy;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Proxy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Referer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string ret = obj.Referer;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Referer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RequestUri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Uri ret = obj.RequestUri;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RequestUri on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SendChunked(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool ret = obj.SendChunked;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendChunked on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServicePoint(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.ServicePoint ret = obj.ServicePoint;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ServicePoint on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SupportsCookieContainer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool ret = obj.SupportsCookieContainer;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SupportsCookieContainer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Timeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			int ret = obj.Timeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Timeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TransferEncoding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string ret = obj.TransferEncoding;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TransferEncoding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UseDefaultCredentials(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool ret = obj.UseDefaultCredentials;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseDefaultCredentials on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UserAgent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string ret = obj.UserAgent;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UserAgent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UnsafeAuthenticatedConnectionSharing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool ret = obj.UnsafeAuthenticatedConnectionSharing;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UnsafeAuthenticatedConnectionSharing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerCertificateValidationCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.Security.RemoteCertificateValidationCallback ret = obj.ServerCertificateValidationCallback;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ServerCertificateValidationCallback on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Accept(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Accept = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Accept on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AllowAutoRedirect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AllowAutoRedirect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllowAutoRedirect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AllowWriteStreamBuffering(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AllowWriteStreamBuffering = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllowWriteStreamBuffering on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AllowReadStreamBuffering(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.AllowReadStreamBuffering = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AllowReadStreamBuffering on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AutomaticDecompression(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.DecompressionMethods arg0 = (System.Net.DecompressionMethods)ToLua.CheckObject(L, 2, typeof(System.Net.DecompressionMethods));
			obj.AutomaticDecompression = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AutomaticDecompression on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ClientCertificates(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Security.Cryptography.X509Certificates.X509CertificateCollection arg0 = (System.Security.Cryptography.X509Certificates.X509CertificateCollection)ToLua.CheckObject<System.Security.Cryptography.X509Certificates.X509CertificateCollection>(L, 2);
			obj.ClientCertificates = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ClientCertificates on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Connection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Connection = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Connection on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ConnectionGroupName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ConnectionGroupName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConnectionGroupName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ContentLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.ContentLength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContentLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ContentType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ContentType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContentType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ContinueDelegate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.HttpContinueDelegate arg0 = (System.Net.HttpContinueDelegate)ToLua.CheckDelegate<System.Net.HttpContinueDelegate>(L, 2);
			obj.ContinueDelegate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContinueDelegate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CookieContainer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.CookieContainer arg0 = (System.Net.CookieContainer)ToLua.CheckObject<System.Net.CookieContainer>(L, 2);
			obj.CookieContainer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CookieContainer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Credentials(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.ICredentials arg0 = (System.Net.ICredentials)ToLua.CheckObject<System.Net.ICredentials>(L, 2);
			obj.Credentials = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Credentials on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Date(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.DateTime arg0 = StackTraits<System.DateTime>.Check(L, 2);
			obj.Date = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Date on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Expect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Expect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Expect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Headers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.WebHeaderCollection arg0 = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 2);
			obj.Headers = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Headers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Host(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Host = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Host on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IfModifiedSince(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.DateTime arg0 = StackTraits<System.DateTime>.Check(L, 2);
			obj.IfModifiedSince = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IfModifiedSince on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_KeepAlive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.KeepAlive = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index KeepAlive on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MaximumAutomaticRedirections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MaximumAutomaticRedirections = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MaximumAutomaticRedirections on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReadWriteTimeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ReadWriteTimeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReadWriteTimeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MediaType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.MediaType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MediaType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Method(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Method = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Method on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Pipelined(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Pipelined = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pipelined on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PreAuthenticate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.PreAuthenticate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PreAuthenticate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ProtocolVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Version arg0 = (System.Version)ToLua.CheckObject(L, 2, typeof(System.Version));
			obj.ProtocolVersion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ProtocolVersion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Proxy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.IWebProxy arg0 = (System.Net.IWebProxy)ToLua.CheckObject<System.Net.IWebProxy>(L, 2);
			obj.Proxy = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Proxy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Referer(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Referer = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Referer on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SendChunked(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SendChunked = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SendChunked on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Timeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Timeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Timeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TransferEncoding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.TransferEncoding = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TransferEncoding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UseDefaultCredentials(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.UseDefaultCredentials = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseDefaultCredentials on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UserAgent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.UserAgent = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UserAgent on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UnsafeAuthenticatedConnectionSharing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.UnsafeAuthenticatedConnectionSharing = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UnsafeAuthenticatedConnectionSharing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ServerCertificateValidationCallback(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebRequest obj = (System.Net.HttpWebRequest)o;
			System.Net.Security.RemoteCertificateValidationCallback arg0 = (System.Net.Security.RemoteCertificateValidationCallback)ToLua.CheckDelegate<System.Net.Security.RemoteCertificateValidationCallback>(L, 2);
			obj.ServerCertificateValidationCallback = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ServerCertificateValidationCallback on a nil value");
		}
	}
}

