//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Net_HttpWebResponseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Net.HttpWebResponse), typeof(System.Net.WebResponse));
		L.RegFunction("GetResponseHeader", GetResponseHeader);
		L.RegFunction("GetResponseStream", GetResponseStream);
		L.RegFunction("Close", Close);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("CharacterSet", get_CharacterSet, null);
		L.RegVar("ContentEncoding", get_ContentEncoding, null);
		L.RegVar("ContentLength", get_ContentLength, null);
		L.RegVar("ContentType", get_ContentType, null);
		L.RegVar("Cookies", get_Cookies, set_Cookies);
		L.RegVar("Headers", get_Headers, null);
		L.RegVar("LastModified", get_LastModified, null);
		L.RegVar("Method", get_Method, null);
		L.RegVar("ProtocolVersion", get_ProtocolVersion, null);
		L.RegVar("ResponseUri", get_ResponseUri, null);
		L.RegVar("Server", get_Server, null);
		L.RegVar("StatusCode", get_StatusCode, null);
		L.RegVar("StatusDescription", get_StatusDescription, null);
		L.RegVar("SupportsHeaders", get_SupportsHeaders, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResponseHeader(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)ToLua.CheckObject<System.Net.HttpWebResponse>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetResponseHeader(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResponseStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)ToLua.CheckObject<System.Net.HttpWebResponse>(L, 1);
			System.IO.Stream o = obj.GetResponseStream();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Close(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)ToLua.CheckObject<System.Net.HttpWebResponse>(L, 1);
			obj.Close();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CharacterSet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			string ret = obj.CharacterSet;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CharacterSet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ContentEncoding(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			string ret = obj.ContentEncoding;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContentEncoding on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ContentLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			long ret = obj.ContentLength;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContentLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ContentType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			string ret = obj.ContentType;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContentType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Cookies(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			System.Net.CookieCollection ret = obj.Cookies;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Cookies on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Headers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			System.Net.WebHeaderCollection ret = obj.Headers;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Headers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastModified(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			System.DateTime ret = obj.LastModified;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastModified on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Method(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			string ret = obj.Method;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Method on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ProtocolVersion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			System.Version ret = obj.ProtocolVersion;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ProtocolVersion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ResponseUri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			System.Uri ret = obj.ResponseUri;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ResponseUri on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Server(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			string ret = obj.Server;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Server on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StatusCode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			System.Net.HttpStatusCode ret = obj.StatusCode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StatusCode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StatusDescription(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			string ret = obj.StatusDescription;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StatusDescription on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SupportsHeaders(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			bool ret = obj.SupportsHeaders;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SupportsHeaders on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Cookies(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.HttpWebResponse obj = (System.Net.HttpWebResponse)o;
			System.Net.CookieCollection arg0 = (System.Net.CookieCollection)ToLua.CheckObject<System.Net.CookieCollection>(L, 2);
			obj.Cookies = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Cookies on a nil value");
		}
	}
}

