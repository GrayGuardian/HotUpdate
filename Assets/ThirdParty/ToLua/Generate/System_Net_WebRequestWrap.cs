//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Net_WebRequestWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Net.WebRequest), typeof(System.MarshalByRefObject));
		L.RegFunction("Create", Create);
		L.RegFunction("CreateDefault", CreateDefault);
		L.RegFunction("CreateHttp", CreateHttp);
		L.RegFunction("RegisterPrefix", RegisterPrefix);
		L.RegFunction("GetRequestStream", GetRequestStream);
		L.RegFunction("GetResponse", GetResponse);
		L.RegFunction("BeginGetResponse", BeginGetResponse);
		L.RegFunction("EndGetResponse", EndGetResponse);
		L.RegFunction("BeginGetRequestStream", BeginGetRequestStream);
		L.RegFunction("EndGetRequestStream", EndGetRequestStream);
		L.RegFunction("GetRequestStreamAsync", GetRequestStreamAsync);
		L.RegFunction("GetResponseAsync", GetResponseAsync);
		L.RegFunction("Abort", Abort);
		L.RegFunction("GetSystemWebProxy", GetSystemWebProxy);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("DefaultCachePolicy", get_DefaultCachePolicy, set_DefaultCachePolicy);
		L.RegVar("CachePolicy", get_CachePolicy, set_CachePolicy);
		L.RegVar("Method", get_Method, set_Method);
		L.RegVar("RequestUri", get_RequestUri, null);
		L.RegVar("ConnectionGroupName", get_ConnectionGroupName, set_ConnectionGroupName);
		L.RegVar("Headers", get_Headers, set_Headers);
		L.RegVar("ContentLength", get_ContentLength, set_ContentLength);
		L.RegVar("ContentType", get_ContentType, set_ContentType);
		L.RegVar("Credentials", get_Credentials, set_Credentials);
		L.RegVar("UseDefaultCredentials", get_UseDefaultCredentials, set_UseDefaultCredentials);
		L.RegVar("Proxy", get_Proxy, set_Proxy);
		L.RegVar("PreAuthenticate", get_PreAuthenticate, set_PreAuthenticate);
		L.RegVar("Timeout", get_Timeout, set_Timeout);
		L.RegVar("AuthenticationLevel", get_AuthenticationLevel, set_AuthenticationLevel);
		L.RegVar("ImpersonationLevel", get_ImpersonationLevel, set_ImpersonationLevel);
		L.RegVar("DefaultWebProxy", get_DefaultWebProxy, set_DefaultWebProxy);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Net.WebRequest o = System.Net.WebRequest.Create(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Uri>(L, 1))
			{
				System.Uri arg0 = (System.Uri)ToLua.ToObject(L, 1);
				System.Net.WebRequest o = System.Net.WebRequest.Create(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.WebRequest.Create");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateDefault(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Uri arg0 = (System.Uri)ToLua.CheckObject<System.Uri>(L, 1);
			System.Net.WebRequest o = System.Net.WebRequest.CreateDefault(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateHttp(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				System.Net.HttpWebRequest o = System.Net.WebRequest.CreateHttp(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Uri>(L, 1))
			{
				System.Uri arg0 = (System.Uri)ToLua.ToObject(L, 1);
				System.Net.HttpWebRequest o = System.Net.WebRequest.CreateHttp(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Net.WebRequest.CreateHttp");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterPrefix(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			System.Net.IWebRequestCreate arg1 = (System.Net.IWebRequestCreate)ToLua.CheckObject<System.Net.IWebRequestCreate>(L, 2);
			bool o = System.Net.WebRequest.RegisterPrefix(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRequestStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)ToLua.CheckObject<System.Net.WebRequest>(L, 1);
			System.IO.Stream o = obj.GetRequestStream();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResponse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)ToLua.CheckObject<System.Net.WebRequest>(L, 1);
			System.Net.WebResponse o = obj.GetResponse();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginGetResponse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Net.WebRequest obj = (System.Net.WebRequest)ToLua.CheckObject<System.Net.WebRequest>(L, 1);
			System.AsyncCallback arg0 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			System.IAsyncResult o = obj.BeginGetResponse(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndGetResponse(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.WebRequest obj = (System.Net.WebRequest)ToLua.CheckObject<System.Net.WebRequest>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			System.Net.WebResponse o = obj.EndGetResponse(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BeginGetRequestStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			System.Net.WebRequest obj = (System.Net.WebRequest)ToLua.CheckObject<System.Net.WebRequest>(L, 1);
			System.AsyncCallback arg0 = (System.AsyncCallback)ToLua.CheckDelegate<System.AsyncCallback>(L, 2);
			object arg1 = ToLua.ToVarObject(L, 3);
			System.IAsyncResult o = obj.BeginGetRequestStream(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EndGetRequestStream(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			System.Net.WebRequest obj = (System.Net.WebRequest)ToLua.CheckObject<System.Net.WebRequest>(L, 1);
			System.IAsyncResult arg0 = (System.IAsyncResult)ToLua.CheckObject<System.IAsyncResult>(L, 2);
			System.IO.Stream o = obj.EndGetRequestStream(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRequestStreamAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)ToLua.CheckObject<System.Net.WebRequest>(L, 1);
			System.Threading.Tasks.Task<System.IO.Stream> o = obj.GetRequestStreamAsync();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResponseAsync(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)ToLua.CheckObject<System.Net.WebRequest>(L, 1);
			System.Threading.Tasks.Task<System.Net.WebResponse> o = obj.GetResponseAsync();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Abort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)ToLua.CheckObject<System.Net.WebRequest>(L, 1);
			obj.Abort();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSystemWebProxy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			System.Net.IWebProxy o = System.Net.WebRequest.GetSystemWebProxy();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultCachePolicy(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Net.WebRequest.DefaultCachePolicy);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CachePolicy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Net.Cache.RequestCachePolicy ret = obj.CachePolicy;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CachePolicy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Method(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			string ret = obj.Method;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Method on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RequestUri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Uri ret = obj.RequestUri;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RequestUri on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectionGroupName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			string ret = obj.ConnectionGroupName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConnectionGroupName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Headers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Net.WebHeaderCollection ret = obj.Headers;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Headers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ContentLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			long ret = obj.ContentLength;
			LuaDLL.tolua_pushint64(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContentLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ContentType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			string ret = obj.ContentType;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContentType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Credentials(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Net.ICredentials ret = obj.Credentials;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Credentials on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UseDefaultCredentials(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			bool ret = obj.UseDefaultCredentials;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseDefaultCredentials on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Proxy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Net.IWebProxy ret = obj.Proxy;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Proxy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PreAuthenticate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			bool ret = obj.PreAuthenticate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PreAuthenticate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Timeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			int ret = obj.Timeout;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Timeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AuthenticationLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Net.Security.AuthenticationLevel ret = obj.AuthenticationLevel;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AuthenticationLevel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ImpersonationLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Security.Principal.TokenImpersonationLevel ret = obj.ImpersonationLevel;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ImpersonationLevel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultWebProxy(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, System.Net.WebRequest.DefaultWebProxy);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefaultCachePolicy(IntPtr L)
	{
		try
		{
			System.Net.Cache.RequestCachePolicy arg0 = (System.Net.Cache.RequestCachePolicy)ToLua.CheckObject<System.Net.Cache.RequestCachePolicy>(L, 2);
			System.Net.WebRequest.DefaultCachePolicy = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CachePolicy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Net.Cache.RequestCachePolicy arg0 = (System.Net.Cache.RequestCachePolicy)ToLua.CheckObject<System.Net.Cache.RequestCachePolicy>(L, 2);
			obj.CachePolicy = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CachePolicy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Method(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.Method = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Method on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ConnectionGroupName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ConnectionGroupName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ConnectionGroupName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Headers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Net.WebHeaderCollection arg0 = (System.Net.WebHeaderCollection)ToLua.CheckObject<System.Net.WebHeaderCollection>(L, 2);
			obj.Headers = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Headers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ContentLength(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			long arg0 = LuaDLL.tolua_checkint64(L, 2);
			obj.ContentLength = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContentLength on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ContentType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.ContentType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ContentType on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Credentials(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Net.ICredentials arg0 = (System.Net.ICredentials)ToLua.CheckObject<System.Net.ICredentials>(L, 2);
			obj.Credentials = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Credentials on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UseDefaultCredentials(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.UseDefaultCredentials = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UseDefaultCredentials on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Proxy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Net.IWebProxy arg0 = (System.Net.IWebProxy)ToLua.CheckObject<System.Net.IWebProxy>(L, 2);
			obj.Proxy = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Proxy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PreAuthenticate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.PreAuthenticate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PreAuthenticate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Timeout(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Timeout = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Timeout on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AuthenticationLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Net.Security.AuthenticationLevel arg0 = (System.Net.Security.AuthenticationLevel)ToLua.CheckObject(L, 2, typeof(System.Net.Security.AuthenticationLevel));
			obj.AuthenticationLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index AuthenticationLevel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ImpersonationLevel(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Net.WebRequest obj = (System.Net.WebRequest)o;
			System.Security.Principal.TokenImpersonationLevel arg0 = (System.Security.Principal.TokenImpersonationLevel)ToLua.CheckObject(L, 2, typeof(System.Security.Principal.TokenImpersonationLevel));
			obj.ImpersonationLevel = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ImpersonationLevel on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DefaultWebProxy(IntPtr L)
	{
		try
		{
			System.Net.IWebProxy arg0 = (System.Net.IWebProxy)ToLua.CheckObject<System.Net.IWebProxy>(L, 2);
			System.Net.WebRequest.DefaultWebProxy = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

