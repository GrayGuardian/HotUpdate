local DownloadFile = class("DownloadFile")
local CSHttpUtil = Util.Http
function DownloadFile:ctor(url, threadCount, cb, error)
    self.url = url
    self.size = nil
    self.threadCount = threadCount or 10
    self.error = error
    self.tempFilePaths = {}
    ActionList:new():on(
        function(next)
            -- 读取文件尺寸
            self:getFileSizeAsyn(
                function(size)
                    self.size = size
                    next()
                end,
                function(ex)
                    print(string.format("读取文件大小出错 >>> url:%s message:%s", self.url, ex.Message))
                    if (self.error ~= nil) then
                        self.error(ex)
                    end
                end
            )
        end
    ):on(
        function(next)
            -- 准备工作
            -- 重算下载线程数 文件大小 配置等各种因素
            -- 保证每个线程最少的下载大小
            self.threadCount =
                self.size / self.threadCount > 100 * 8 and self.threadCount or math.ceil(self.size / self.threadCount)
            -- 临时文件夹

            -- 新建临时文件夹
            Util.File:CreateDirectory(GameConst.DOWNLOAD_TEMPFILE_ROOT)
        end
    ):on(
        function(next, size)
            local datas = {}
            local time = Time.time
            local oneDownloadOver = function(index, data)
                print(string.format("[%d]下载完毕>>>size:%d", index, data.Length))
                datas[index] = data
                if (#datas >= threadCount) then
                    print(string.format("全部下载完毕>>>time：%f", Time.time - time))
                end
            end

            -- 分段文件大小
            local sizes = self:splitFileSize(size, threadCount)
            -- 开始分段下载
            for index, lsize in pairs(sizes) do
                print(index, util.serialize(lsize))
                local request = System.Net.HttpWebRequest.Create(System.Uri(url))
                request.Timeout = 10000
                request:AddRange(lsize.min, lsize.max)

                Util.Http:Download(
                    request,
                    function(response, data)
                        oneDownloadOver(index, data)
                    end,
                    function(response, data, rbytes)
                        -- print(string.format("[%d]正在下载>>>size:%d", index, data.Length))
                    end
                )
            end
        end
    ):show()
end
-- 异步获取文件大小
function DownloadFile:getFileSizeAsyn(cb, error)
    local request = System.Net.HttpWebRequest.Create(System.Uri(self.url))
    request.Method = "HEAD"
    request.Timeout = 1000
    CSHttpUtil:GetDownloadSizeAsyn(
        request,
        function(size)
            if (cb ~= nil) then
                -- 此处需要转换一下 C#的long转lua中的number
                cb(tonumber(tostring(size)))
            end
        end,
        function(ex)
            if (error ~= nil) then
                error(ex)
            end
        end
    )
end

-- 分割文件尺寸 用于多线程并行下载
function DownloadFile:splitFileSize(size, count)
    local arr = {}
    for i = 1, count do
        table.insert(arr, {min = math.ceil(size * (i - 1) / count), max = math.ceil(size * i / count) - 1})
    end
    return arr
end

return DownloadFile
