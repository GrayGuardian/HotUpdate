local Update = class("Update")

local cjson = require("cjson")

function Update:ctor()
    self.localVersion = nil -- 本地资源版本文件
    self.webVersion = nil -- 网络资源版本文件
    self.updateAssetInfos = {} -- 需要更新的资源文件信息
    self.updateSize = 0 -- 需要更新的资源文件总大小
    self.updateCode = 0 -- 更新码

    self:refresh()
end
-- 更新数据
function Update:refresh(cb, error)
    local info = {}
    actionList:new():on(
        function(this)
            -- 获取本地资源版本文件
            local json = CSEncryptUtil:ReadString(GAME_CONST.Asset_Version_Path)
            if (json ~= "") then
                self.localVersion = cjson.decode(json)
            end
            -- 获取远程资源版本文件
            http:getAsyn(
                GAME_CONST.Download_Version_Url,
                function(result)
                    local json = CSEncryptUtil:AesDecrypt(System.String(result.content))
                    self.webVersion = cjson.decode(json)
                    this:next()
                end,
                error
            )
        end
    ):on(
        function(this)
            -- 检查本地文件
            self.updateAssetInfos, self.updateSize = self:getUpdateAssetFile()
            this:next()
        end
    ):on(
        function(this)
            -- 是否需要更新及更新原因
            if (self.webVersion.ClientVersion ~= Application.version) then
                -- 客户端版本不一致，说明客户端需要更新，需要重新下载客户端
                self.updateCode = 1
                this:next()
                return
            end
            -- 判断资源是否缺少或损坏
            if (#self.updateAssetInfos > 0) then
                -- 判断原因
                if (self.localVersion == nil) then
                    -- 本地资源文件不存在，说明第一次打开应用，需要下载资源文件
                    self.updateCode = 2
                elseif (self.localVersion.Version ~= self.webVersion.Version) then
                    -- 资源文件版本不一致，说明版本需要更新
                    self.updateCode = 3
                else
                    -- 资源损坏
                    self.updateCode = 4
                end
            end
            this:next()
            -- 此处不校验资源正确，版本文件错误的情况，建议每次载入都同步一次最新版本文件
        end
    ):on(
        function(this)
            if (cb ~= nil) then
                cb()
            end
        end
    ):show()
end
-- 获取需要更新的资源文件
function Update:getUpdateAssetFile()
    local arr = {}
    local count = 0
    local assetInfos = self.webVersion.Assets
    for key, info in pairs(assetInfos) do
        local size = info.size
        local hash = info.hash
        local filePath = GAME_CONST.Asset_ROOT .. "/" .. info.fileName

        local bytes = CSFileUtil:ReadBytes(filePath)

        if (bytes.Length ~= size or CSFileUtil:ComputeHash(bytes) ~= hash) then
            table.insert(arr, info)
            count = count + info.size
        end
    end
    return arr, count
end
-- 校验资源文件
function Update:checkAssetFile(root)
    local assetInfos = self.webVersion.Assets
    for key, info in pairs(assetInfos) do
        local size = info.size
        local hash = info.hash
        local filePath = root .. "/" .. info.fileName

        local bytes = CSFileUtil:ReadBytes(filePath)
        if (bytes.Length > 0) then
            print(bytes.Length, size, CSFileUtil:ComputeHash(bytes), hash)
            if (bytes.Length ~= size or CSFileUtil:ComputeHash(bytes) ~= hash) then
                return false
            end
        end
    end
    return true
end
-- 更新资源版本文件
function Update:updateVersionFile()
    CSFileUtil:WriteString(
        GAME_CONST.Asset_Version_Path,
        CSEncryptUtil:AesEncrypt(System.String(cjson.encode(self.webVersion)))
    )
end

return Update
