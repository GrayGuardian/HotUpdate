local base = require("ui_base")
local UI = class("ui_hotupdate", base)

UI.ASSET_INFO = {key = "hotupdate", asset = "ui_hotupdate"}
UI.LOAD_ARG = {maskInput = false, maskColor = {r = 0, g = 0, b = 0, a = 0}}

function UI:onStart()
    -- 初始化变量
    self.barNode = self.node:Find("barNode")
    -- 初始化版本文本
    self:refreshVersionText()

    -- 更新逻辑
    actionList:new():on(
        function(this)
            -- 尝试检查更新
            self:tryGetUpdateInfo(
                function()
                    this:next()
                end,
                function()
                    this:into(1)
                end
            )
        end
    ):on(
        function(this)
            -- 提示资源更新信息
            self:showUpdateMsg(
                function()
                    this:next()
                end,
                function()
                    this:into(5)
                end
            )
        end
    ):on(
        function(this)
            -- 开始下载更新文件
            self:downloadFiles(
                function()
                    this:next()
                end
            )
        end
    ):on(
        function(this)
            -- 校验下载资源
            -- 下载资源是否有效
            local isValid = update:checkAssetFile(GAME_CONST.Download_Root)
            if (not isValid) then
                -- 资源校验失败，需要重新下载
                uiMgr:load(
                    "ui_hotupdate_msg",
                    {
                        msg = "资源校验失败，是否重新下载？",
                        btnTitle = "开始下载",
                        isCloseBtn = false,
                        onClick = function()
                            this:into(3)
                        end
                    }
                )
            else
                -- 资源校验成功
                -- 资源从下载临时目录移至正式目录
                for index, info in ipairs(update.updateAssetInfos) do
                    CSFileUtil:MoveTo(
                        GAME_CONST.Download_Root .. "/" .. info.fileName,
                        GAME_CONST.Asset_ROOT .. "/" .. info.fileName,
                        true
                    )
                end

                this:next(update.webVersion.IsRestart)
            end
        end
    ):on(
        function(this, isRestart)
            isRestart = isRestart or false
            -- 清理冗余资源
            self:ClearInvalidAssetFiles()
            -- 同步版本文件
            update:updateVersionFile()

            -- 是否需要重启游戏
            if (isRestart) then
                uiMgr:load(
                    "ui_hotupdate_msg",
                    {
                        msg = "更新完毕，请重启游戏",
                        isCloseBtn = false,
                        onClick = function()
                            Application.Quit()
                        end
                    }
                )
            else
                this:next()
            end
        end
    ):on(
        function(this)
            print("加载数据")

            this:next()
        end
    ):on(
        function(this)
            print("进入游戏")

            sceneMgr:load("Game")
        end
    ):show()
end
-- 尝试检查更新
function UI:tryGetUpdateInfo(onSuccess, onError)
    -- 读取更新数据
    local isGet = false -- 读取到数据
    local isError = false -- 出现错误
    update:refresh(
        function()
            isGet = true
        end,
        function()
            isError = true
        end
    )
    -- 进度条尝试读取更新数据，由于HTTP请求无法确定进度，该进度条为伪进度条，以超时时间为准
    local t = 1.2
    local num = 0
    local barUpdate = nil
    barUpdate = function()
        num = num + UE.Time.deltaTime / t
        self:refreshBar(num, "正在检查更新。。。")
        if (num > 1) then
            self:broadcast_out(BROADCAST_CODE.MONO_UPDATE, barUpdate)
            if (isGet) then
                -- 读取到数据
                if (onSuccess ~= nil) then
                    onSuccess()
                end
            elseif (isError) then
                -- 出现错误
                -- 出现消息框提示错误并提供重试
                uiMgr:load(
                    "ui_hotupdate_msg",
                    {
                        msg = "网络连接超时，是否重试？",
                        btnTitle = "重试",
                        isCloseBtn = false,
                        onClick = function()
                            if (onError ~= nil) then
                                onError()
                            end
                        end
                    }
                )
            end
        end
    end
    self:broadcast_on(BROADCAST_CODE.MONO_UPDATE, barUpdate)
end
-- 提示更新
function UI:showUpdateMsg(onDownload, notUpdate)
    local msg = ""
    if (update.updateCode == 0) then
        -- 不需要更新
        if (notUpdate ~= nil) then
            notUpdate()
        end
        return
    elseif (update.updateCode == 1) then
        -- 客户端更新
        uiMgr:load(
            "ui_hotupdate_msg",
            {
                msg = "需要手动下载安装包进行更新，是否前往下载？",
                btnTitle = "前往下载",
                isCloseBtn = false,
                onClick = function()
                    Application.Quit()
                end
            }
        )
        return
    elseif (update.updateCode == 2) then
        -- 第一次打开应用下载资源
        msg = string.format("首次下载资源文件，共计需要下载%s资源文件", util.sizeFormat(update.updateSize))
    elseif (update.updateCode == 3) then
        -- 版本需要更新
        msg = string.format("发现新版本，共计需要下载%s资源文件", util.sizeFormat(update.updateSize))
    elseif (update.updateCode == 4) then
        -- 资源损坏
        msg = string.format("文件损坏,需要重新下载\n共计需要下载%s资源文件", util.sizeFormat(update.updateSize))
    end
    uiMgr:load(
        "ui_hotupdate_msg",
        {
            msg = msg,
            btnTitle = "开始下载",
            isCloseBtn = false,
            onClick = function()
                if (onDownload ~= nil) then
                    onDownload()
                end
            end
        }
    )
end
-- 下载所有文件
function UI:downloadFiles(cb)
    local order = 1
    local fcount = #update.updateAssetInfos
    actionList:new():on(
        function(this)
            -- 单次下载
            local info = update.updateAssetInfos[order]

            local url = GAME_CONST.Download_Url .. info.fileName
            local filePath = GAME_CONST.Download_Root .. "/" .. info.fileName

            downloadFile:new(url):downloadToFile(
                5,
                filePath,
                function(size, count)
                    -- 正在下载
                    self:refreshBar(
                        size / count,
                        string.format(
                            "正在下载资源[%s/%s]：%s/%s",
                            order,
                            fcount,
                            util.sizeFormat(size),
                            util.sizeFormat(count)
                        )
                    )
                end,
                function(data)
                    -- 下载完毕
                    if (order < fcount) then
                        order = order + 1
                        this:into(1)
                    else
                        this:next()
                    end
                end
            )
        end
    ):on(
        function(this)
            -- 全部下载完毕
            if (cb ~= nil) then
                cb()
            end
        end
    ):show()
end
-- 清理冗余资源
function UI:ClearInvalidAssetFiles()
    local fileNames = {}
    for key, asset in pairs(update.webVersion.Assets) do
        local fileName = asset.fileName
        local min, max = string.rfind(fileName, "/")

        if (min ~= nil) then
            fileName = string.sub(fileName, min + 1)
        end

        table.insert(fileNames, fileName)
    end
    for index, fileRoot in ipairs({GAME_CONST.Asset_ROOT, GAME_CONST.Download_Root}) do
        local fileInfos = CSFileUtil:GetChildFiles(fileRoot)
        for i = 0, fileInfos.Length - 1 do
            local fileInfo = fileInfos:GetValue(i)
            if (not table.exist(fileNames, fileInfo.Name)) then
                fileInfo:Delete()
            end
        end
    end
end
function UI:refreshVersionText()
    local textComp = self.uiComp.Text.versionText
    local version = update.localVersion
    textComp.gameObject:SetActive(version ~= nil)
    if (version ~= nil) then
        textComp.text = string.format("资源版本号：V%s\n客户端版本号：V%s", version.Version, version.ClientVersion)
    end
end

function UI:refreshBar(value, text)
    if (value == nil) then
        self.barNode.gameObject:SetActive(false)
        return
    end
    self.barNode.gameObject:SetActive(true)
    self.uiComp.Image.barValImage.fillAmount = value
    if (text == nil) then
        self.uiComp.Text.barTipText.gameObject:SetActive(false)
    else
        self.uiComp.Text.barTipText.gameObject:SetActive(true)
        self.uiComp.Text.barTipText.text = text
    end
end
return UI
